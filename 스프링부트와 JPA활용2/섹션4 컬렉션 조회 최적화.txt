이전까지는 ?toOne 관계에 대해서 다뤘음(그런가? 그냥 orderRepository에 order들조회하고, id로 member하나 조회했는데)

여기는 OneToMany를 조회, 최적화하는 방법
(위에서 찾은 order의 orderItems와, 이 orderItems의 item을 조회하기)
(즉 주문내역과 그 상품명을 같이 출력하기)


[V2 엔터티를 DTO로 변환]

주의사항
Dto 클래스 안에 엔터티를 또 필드로 갖고 있으면 안됨 
class OrderDto{
private List<OrderItem> orderitems; //<- 이러면 안됨 List<OrderItemDto>로 변환
_엔터티를 노출하면 안되는데 Dto클래스안에 엔터티가 또 담기게 되니까 그것도 Dto로 변환해주는 거임

ex) (섹션3 - 엔터티를 DTO로 변환 파트 참고)
1. http메서드에서 List<Order>를 List<OrderDto>로 변환
2. OrderDto클래스 contructor에서 파라미터로 온 Order의 정보를 주입할 때 OrderItem을 OrderItemDto로 변환후, 주입

* 물론 List<OrderItemDto>를 Result클래스에 한 번 더 담아야 함(섹션3 참고)

* Embedded타입은 엔터티가 아님



[V3 페치 조인으로 최적화]

섹션3과 마찬가지로 지연로딩으로 인해 쿼리가 여러번(1+N)나가는 걸 페치 조인으로 최적화 가능
단, 신경쓸게 더 있음
-> 1대다 조인으로 인해 1쪽이 중복되어 row가 증가함, 즉 같은 엔터티를 중복 조회함(order가 1, orderItems가 다)
-> jpql의 distinct기능 사용
ex)
jpql에 select distinct o from Order o 이렇게 distinct를 사용
(db의 distinct기능 + 영속성 컨텍스트에서 id를 비교해 같은 객체면 distinct해줌)
//섹션3 ver3참고

* 컬렉션 페치조인 단점 :  페이징이 불가능함 
- 다시말해 1대다 조인에서 fetch join과 페이징함수를 같이 쓰는 경우임
- 즉 .setFirstResult(n) 또는 .setMaxResult(m) 같은게 이상하게 작동
- 페이징은 JPA책 364p 참고
- 1대다 가 아니면 상관없음
- 컬렉션 페치 조인은 1개만 사용가능, 컬렉션 둘 이상에 페치조인을 사용하면 안됨

-> 그럼 1대다 페이징은 어떻게 해야하나



[V3.1 페이징과 한계 돌파] (엔터티와 연관관계를 가지는 컬렉션필드 페이징하기)
책373p참고

페치조인에 페이징사용이 안되는 이유
: 컬렉션을 페치 조인하면 일대다 조인이 발생하므로 일 쪽이 중복되어 데이터가 증가 함,
setFirstResult(1)은 일을 기준으로 1부터 찾는 건데 데이터는 다를 기준으로 row가 생성됨 


해결방법
: 1. ToOne관계는 모두 fetch join 한다.(상황을 복기하자면 order를 조회하려는데 order가 연관관계를 가지고 있는 컬렉션필드들을 조회할 때)(섹션3 ver3참고)
2. 컬렉션은 지연 로딩으로 조회한다.(jpql 쿼리문에 아무것도 안써준다)
3. 지연로딩 성능 최적화를 위한 application.yml에 옵션 설정
ex)
jpa:
  :hibernate
    :default_batch_fetch_size: 1000
//원래 컬렉션의 갯수 n번 지연조회가 일어나는데 한번에 조회해줌(원리는 강의나 pdf참고),
//즉 1 + n이 1 + 1로 줄어듦
//size 1000은 한번에 조회할 컬렉션의 최대 갯수임, size가 2인데 컬렉션 size()가 10개면 5번 조회가 일어나는 것
// size의 max크기가 1000임, 단 부하가능성이 있으므로 100~1000개 사이로 지정, 애매하면 그냥 500두고 쓰라심
 
* V3은 1으로 끝나지만 V3.1은 1 + 1임
* 페이징이 필요하면 V3.1방법, 필요없으면 V3방법




API개발 고급 정리
*섹션 3은 ?ToOne 연관관계의 필드 조회
*섹션 4는 ?ToMany 연관관계의 필드 조회
엔터티 조회(등록, 수정은 API개발 기본_섹션1)
- 엔터티 조회 후 DTO로 변환
- 페치 조인으로 쿼리 수 최적화
- ?ToMany(컬렉션 필드 조회)인 경우에는 V3의 방법과 V3.1의 방법 2가지 존재
(페이징이 필요없으면 전자, 필요하면 후자)


여기까지하면 대부분의 성능문제 해결 가능 이 뒤 V4부터는 다음에 필요할때 보기







