섹션9 빈 스코프

[빈 스코프란?]

빈이 생성돼서 사라지기까지의 범위

스프링이 지원하는 스코프 종류
- 싱글톤 : default스코프, 스프링 컨테이너의 시작과 종료까지 _가장 넓은 범위의 스코프
- 프로토타입 : 스프링 컨테이너의 시작될때 생성, 그 이후는 관리안함 _빈 클래스에 @Scope("prototype")
- 웹 관련 스코프(스프링 웹과 관련 기능이 들어가야 사용가능한 스코프)
-- request : 웹 요청이 들어오고 나갈때까지 존재
-- ssesion : 웹 세션이 생성되고 종료될때까지 존재
-- application : 웹의 서블리 컨텍스와 같은 범위로 유지되는 스코프

=> 싱글톤, 프로토타입, request만 알면 됨

등록 방법
- 컴포넌트 스캔 자동등록
빈 클래스에 @Scope("prototype")

- 설정 정보(Configuration클래스)에서 수동 등록
빈 등록 메서드(@Bean)에 @Scope("prototype")




[프로토타입 스코프]	//어쩌다가 쓰게됨, 거의 안씀

프로토타입 스코프 빈을 조회하면 싱글톤과 다르게 컨테이너가 항상 새로운 인스턴스를 생성해 의존관계 주입후 클라이언트에게 반환함 _그리고 그 객체를 더이상 컨테이너가 가지고 있지 않음
따라서, 프로토타입 빈은 @PreDestroy 메서드가 호출되지 않음, 객체를 받은 클라이언트가 직접 종료해줘야함

=> 정리
1. 싱글톤 빈과 다르게 요청마다 새로 생성
2. 생성이후 컨테이너가 관리X _소멸전콜백(@PreDestroy) 메서드는 실행 안됨


[프로토타입 스코프 - 싱글톤 빈과 함께 사용시 문제점]

문제점 설명 :
의도 -> 프로토타입 빈은 클라이언트마다 따로 할당해줄 목적으로 사용
그런데 프로토타입 빈을 싱글톤 빈에 담아서 사용할 경우, 모든 클라이언트가 싱글톤 빈을 통해 같은 프로토타입 빈을 사용하게 됨


[프로토타입 스코프 - 싱글톤 빈과 함께 사용시 Provider로 문제 해결]
위 문제 해결 방법

지정한 프로토타입 빈을 컨테이너에서 대신 찾아주는 무언가 _DL(Dependency Lookup) 해주는 객체
: 니가 대신 컨테이너에서 프로토타입 빈 찾아줘
-> ObjectProvider객체와 getObject()함수

ex) 클라이언트들에게 프로토타입 빈인 MemoJang을 나눠주고 싶다
@Autowired	// 실제는 생성자 주입으로 사용, 빈으로 등록안해도 알아서 됨
private ObjectProvider<MemoJang> prototypeBeanProvider;

초기화로직(){
  MemoJang memoJang = prototypeBeanProvider.getObject();
  // 데이터멤버로 가지고 있던걸 지역변수로 내려서 주입받기
}
*스프링제공기능

또 다른 방법
1. build.gradle의 dependencies에 implementation 'jakarta.inject:jakarta.inject-api:2.0.1' 추가
2. 위 ObjectProvider객체 대신 Provider, 함수는 get()사용
_주의 : jakarta.inject라이브러리의 Provider
* 자바 표준

* 둘 중 어떤 방법을 쓸까 : 아무거나써도 되는데 스프링 제공 기능인 ObjectProvider를 쓰자




[웹 스코프]

특징 : 웹 환경에서만 동작, 프로토타입과 다르게 스프링이 종료까지 관리해줌 _종료메서드 호출됨

종류
- request : HTTP요청 하나가 들어오면 생성되고 요청이 끝나면 소멸됨, 각각의 클라이언트(HTTP요청)에 대한 전용 빈 인스턴스가 하나씩 생성,관리됨
ex) 클라이언트 A가 HTTPrequest요청시 A전용request scope빈이 생성되어 할당됨, B가 요청시 B전용 빈이 할당됨
// 프로토타입은 요청마다 새로생성이지만, 이 경우는 같은 클라이언트는 자기가 한번 만든 빈을 계속 사용한다는점
- session : 서블릿 컨텍스트와 동일한 생명주기 
- application : 웹 소켓과 동일한 생명주기


[request 스코프 예제 만들기]

* 동시에 여러 HTTP 요청이 오면 정확히 어떤 요청이 남긴 로그인지 구분하기 어려움
이럴때 사용하기 딱 좋은게 request스코프 _요청당 하나씩 생성되므로 요청의 UUID를 저장해두면 다른 요청과 구분 가능


: 지금하던거 문제 : 컨테이너가 생성될때 Logger를 만들어야되는데 얘는 request가 와야 생성됨 근데 생성시점에 request가 어떻게오냐, 따라서 컨테이너와 request의 scope가 안맞으니 의존관계주입이 안되서 실행이 안되는 문제
-> Provider에게 니가 찾아서 넣어줘라 해주면 된다는데 내가 넣나 Provider가넣어주나 어차피 같은 시점인데 어떻게 해결한다는건지 _다음시간에


[스코프와 Provider]
위에 답 : 의존관계 주입단계를 생성시점이아니라 고객의 요청이 왔을때로(지연시킴), 그후에 Provider를 이용하여 주입한다는 얘기

위 프로토타입 예시와 마찬가지로 데이터멤버로 가지고 있던 Logger를 로직메서드에서 지역변수로 만들고, ObjectProvider의 getObject()함수로 주입받기
* 당연히 마찬가지로 ObejctProvider<Logger> op를 데이터멤버로 @Autowired로 주입받아 가지고 있기

* UUID : 클라이언트 요청 구분하는 id생성 라이브러리 (id가 같을확률 없음)
ex) String uuid = UUID.randomUUID().toString();

-> 이걸 더 간단하게 줄이는 법 : 다음챕터

[스코프와 프록시]
위 처럼 Provider안씀, @Scope("request")인 Logger객체도 데이터멤버로 가지고 있게 해둠

=> 대신 request scope객체에 @Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS)
라고 써줌
* 적용 대상이 인터페이스면 TARGET_INTERFACES 선택

설명 : 컨테이너 생성시 Logger데이터 멤버에 가짜 프록시 객체(request스코프객체)가 들어감,
 나중에 클라이언트 요청이 오면 그때 생성되어 주입됨
* 꼭 필요한데만 사용하기 (유지보수하기 어려워짐)





























