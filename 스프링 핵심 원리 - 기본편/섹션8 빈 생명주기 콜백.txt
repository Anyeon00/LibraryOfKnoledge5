섹션8 빈 생명주기 콜백

[빈 생명주기 콜백 시작]

네트워크상으로 연결되고 종료될 때, 데이터베이스등과 관련하여 안전하게 종료되어야 함

초기화 작업은 의존관계 주입이 모두 완료된고 난 다음에 호출해야 함
근데 개발자가 의존관계 주입이 완료된 시점을 어떻게 알 수 있을까
-> 스프링이 초기화 시점을 알려주는 기능을 제공

* 스프링 빈의 이벤트 라이프사이클
스프링 컨테이너 생성 -> 스프링 빈 생성 -> 의존관계 주입
-> 초기화 콜백 -> 사용 -> 소멸전 콜백 -> 스프링 종료
// 초기화 콜백 : 빈 생성, 의존관계 주입 후 호출
// 소멸전 콜백 : 빈이 소멸되기 직전 호출

=> 스프링은 크게 3가지 방법으로 빈 생명주기 콜백 지원
1. 인터페이스(InitializingBean, DisposableBean)
2. 설정 정보에 초기화 메서드, 종료 메서드 지정
3. @PostConstruct, @PreDestroy 어노테이선 지원 <- 그냥 이방법 써라


* 참고
: 객체의 생성과 초기화를 분리하자
생성은 메모리할당, 초기화는 커넥션 연결등 중요 로직을 수행
따라서 나누는 것이 유지보수가 좋다
+ 객체를 생성해놓고 특정 정보가 주어질 때 그걸 이용해 초기화하는 것이 가능


[인터페이스 InitializingBean, DisposableBean]
첫번째 방법

initializingBean의 구현 메서드 afterPropertiesSet()
: 의존관계 주입이 끝나면 호출해주겠다는 뜻 //초기화 콜백

DisposableBean의 구현 메서드 destroy()
: 빈 소멸 직전 호출	//소멸전 콜백

단점 - 스프링전용, 콜백 메서드들 이름 변경 불가능, 외부 라이브러리에는 적용 불가능 
=> 거의 사용 안함


[빈 등록 초기화, 소멸 메서드]
두번째 방법

설정 정보 Configuration클래스에서
등록한 빈의 @Bean어노테이션에다가
@Bean(initMethod = "A", destroyMethod = "B")
A에 초기화 콜백 메서드로 사용할 빈에 구현된 메서드이름,
B에 소멸전 콜백 메서드로 사용할 빈에 구현된 메서드이름 입력

특징 - 원하는 메서드이름으로 사용가능, 스프링 빈이 스프링코드에 의존하지 않음,
빈 코드가 아니라 설정 정보를 사용하므로 코드를 고칠 수 없는 외부 라이브러리에도 적용 가능
// 소멸전 콜백 메서드는 그냥 @Bean만 써도 외부 라이브러리에 자동으로 적용됨


[애노테이션 @PostConstruct, @PreDestroy]
세번째 방법

빈 클래스에서 초기화 콜백 메서드에 @PostConstruct
소멸전 콜백 메서드에 @PreDestroy
써주기

* 특징 : 매우편리, Configuration클래스 없어도 작동, 유일한 단점은 외부라이브러리 적용 불가

=> 이 방법 써라
+ 코드를 고칠수 없는 외부 라이브러리를 초기화,종료 해야하면 @Bean의
initMethod와 destroyMethod 이용

























