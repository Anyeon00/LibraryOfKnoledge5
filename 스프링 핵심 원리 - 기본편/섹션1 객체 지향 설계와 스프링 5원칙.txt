섹션1 객체 지향 설계와 스프링

[스프링이란?]
sprint 기술
* spring.io 사이트 상단의 project - overview참고

필수 기술 : Spring Framework 와 Spring Boot 
선택 기술 : Spring Data, Spring Cloud, Spring Security, Spring Session, ...
* 핵심은 Spring Framework고 이 모든걸 사용하기 편리하게 해주는게 Spring Boot


스프링 프레임워크
- 핵심 기술 : 스프링 DI 컨테이너, AOP, 이벤트, 기타
- 웹 기술 : 스프링 MVC, 스프링 WebFlux
- 데이터 접근 기술 : 트랜잭션, JDBC , ORM지원, XML 지원
- 기술 통합 : 캐시, 이메일, 원격접근, 스케줄링
- 테스트 : 스프링 기반 테스트 지원
- 언어 : 코틀린, 그루비


스프링이란
: 문맥에 따라 다름
- 스프링 DI 컨테이너 기술
- 스프링 프레임워크
- 스프링 부트, 스프링 프레임워크 등을 모두 포함한 스프링 생태계


스프링 핵심 개념
- 스프링은 자바 언어 기반
- 자바의 가장 큰 특징 : 객체 지향
-> 스프링은 좋은 객체 지향 application을 개발 할 수 있게 도와주는 프레임 워크


[좋은 객체 지향 프로그래밍 이란?]
다형성 -> 유연하고 변경이 용이

'역할'과 '구현'
사용자는 '역할(인터페이스)'만 알면 됨

역할을 먼저 만들고 역할을 수행하는 구현 객체 만들기

서비스 객체가 이용할 저장소 인터페이스를 구현
-> 서비스는 인터페이스의 함수를 이용하면 됨

ex)
서비스는 Repository(인터페이스)를 이용함, Repository는 구현한 객체들을 갈아 끼울 수 있음!!


결론 : 스프링은 다형성을 극대화해서 이용할 수 있게 도와준다
_ 제어의 역전(IoC), 의존관계 주입(DI) 등
_ 스프링을 사용하면 레고 블럭 조립하듯이 프로그래밍 가능


[좋은 객체 지향 설계의 5가지 원칙(SOLID)]
클린코드로 유명한 로버트 마틴이 정리
SRP (single responsibility principle) : 단일 책임 원칙
OCP (Open/closed principle) : 개방-폐쇄 원칙
LSP (Liskov substitution principle) : 리스코프 치환 원칙
ISP (Interface segregation principle) : 인터페이스 분리 원칙
DIP (Dependency inversion principle) : 의존관계 역전 원칙

SRP - 한 클래스는 하나의 책임만 가져야 한다
_변경시 파급효과가 적으면 잘 지켜진 것

OCP - 소프트웨어 요소는 확장에는 열려있으나 변경에는 닫혀있어야 한다
_인터페이스의 구현체(클래스)를 더 늘릴수는 있음, 인터페이스 사용객체는 변경할 필요가 없음(다형성)
그런데 예를들어, 
인터페이스 사용객체 MemberService가 MemberRepository인터페이스를 사용하는데 구현 객체를 바꿀때
MemberRepository m = new MemoryMemberRepository();  // 기존 코드
MemberRepository m = new JdbcMemberRepository();  // 변경 코드
이렇게 클라이언트 코드를 변경해야함
=> 다형성을 사용했지만 OCP가 깨짐 => DI컨테이너 등을 이용

LSP - 프로그램 객체는 프로그램의 '정확성'을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
_인터페이스의 하위 클래스는 인터페이스의 규약을 지켜야함
ex) 자동차 인터페이스의 엑셀기능은 느리든 빠르든 앞으로 가야하는데, 뒤로가게 만들면 LSP위반임

ISP - 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다
_특정자동차 인터페이스를 -> 운전 인터페이스, 정비 인터페이스로 나누면
사용자 클라이언트는 운전 인터페이스, 정비사 클라이언트는 정비 인터페이스를 사용 가능

DIP - 추상화에 의존해야지, 구체화에 의존하면 안된다
_구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻
즉, 역할에 의존해야한다, 
ex) 사용자는 '자동차'를 사용하는 것임, 자동차가 어떻게 구현되었는지는 몰라도 됨
위 OCP의 예에서 MemberService가 MemberRepository의 구현객체를 직접 선택하고 있으므로 DIP위반(알고있으면 의존관계임, MemberService가 인터페이스뿐만아니라 구현객체까지 알고있으므로 DIP위반)
-> 이를 DI컨테이너를 이용해 해결함(사용할 Repository구현객체를 Bean으로 등록해 컨테이너에 넣고 Service는 MemberRepository를 @Autowired로 가져옴으로 해결)


* 다형성만으로는 OCP, DIP를 지킬수 없다, 뭔가 더필요하다 라는 결론

* OCP, DIP 2개가 가장 중요
* 면접때 자주 물어봄

[객체지향 설계와 스프링]
스프링은 다음 기술로 다형성 + OCP, DIP가 가능하게 지원
- DI(Dependency Injection) : 의존관계, 의존성 주입
- DI 컨테이너 제공


* 이론상 모든 것을 인터페이스(역할)로 만드는 것이 좋음
하지만 그러면 단점이 생김 : 나중에 코드를 확인할 때 예를들어 자동차에 문제가 있으면 일일이 자동차 구현클래스를 한번더 찾아가야함
-> 추후 확장 가능성이 없는 객체는 바로 구현클래스로 사용











