섹션6 컴포넌트 스캔

등록해야할 Bean이 점점 많아지고 귀찮음
-> 자동으로 Bean을 등록해주는 '컴포넌트 스캔'기능을 제공
(의존관계도 자동으로 주입해주는 @Autowired라는 기능도 제공)


=> AppConfig클래스에 @ComponentScan 붙이면 @Component로 돼있는거 전부 Bean으로 등록함

=> AppConfig클래스에 @Configuration과 @ComponentScan 붙이면 클래스바디에 아무것도안써도됨
- 이러면 Bean으로 등록할 객체클래스에 @Component, 의존관계설정을 위해 @Autowired도 지정해줘야함


원리: 
1. 컨테이너가 @Component들을 다 스프링 빈으로 (싱글톤으로) 등록한다.
*이 때 스프링 빈의 기본이름은 '클래스명첫글자 소문자로' 
ex) AppConfig -> appConfig

2. 생성자에 @Autowired를 지정하면 스프링 컨테이너가 자동으로 같은 type의 Bean을 찾아서 주입한다.
* 같은 Type이 여러개면 충돌이 일어남 _뒤에 설명


[탐색 위치와 기본 스캔 대상]
Conponent를 Scan할 대상을 지정 가능
ex) @ComponentScan( basePackages = "hello.core.member" )  // member패키지안에서 스캔, 여러개도 가능
* 지정안할시 default값은 이 어노테이션 사용 클래스가 들어있는 패키지에서 스캔

=> 설정정보 클래스의 위치를 프로젝트 최상단에 두고 default값으로 사용을 권장
(스프링 부트를 쓰면 @ComponentScan을 쓸 필요가 없음..)


컴포넌트 스캔 기본 대상
컴포넌트 스캔은 @Component뿐만 아니라 다음도 추가로 대상에 포함함
@Service : 핵심 비즈니스 로직에서 사용 
_그냥 의미는 없음
@Controller : MVC 컨트롤러에서 사용 
_컨트롤러로 인식
@Repository : 데이터 접근 계층에서 사용 
_ 접근 데이터 계층으로 인식 후 예외처리
@Configuration : 스프링 설정 정보 
_설정정보로 인식, 싱글톤 유지 로직 처리

* 소스코드를 보면 모두 @Component를 포함하고 있음



[필터]
컴포넌트 스캔 대상을 
includeFilters : 추가
excludeFilters : 제외


FilterType 옵션

* Filter 쓸일은 거의 없다


[중복 등록과 충돌]
컴포넌트 스캔에서 같은 빈 이름을 등록하면?
두가지상황
1. 자동 빈 등록 vs 자동 빈 등록(컴포넌트 스캔으로 자동 등록)
2. 수동 빈 등록 vs 자동 빈 등록

1번 상황은 거의 없음
-> Exception발생 

2번 상황 발생 가능성 존재
-> 수동 빈 등록이 우선권
(수동 빈이 자동 빈을 오버라이딩 해버림)
* 근데 2번상황 대부분이 의도치 않은 상황이라 최근에는 그냥 오류로 처리하게 업뎃함



























