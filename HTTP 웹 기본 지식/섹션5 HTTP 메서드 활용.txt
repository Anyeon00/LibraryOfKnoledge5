섹션5 HTTP 메서드 활용

[클라이언트에서 서버로 데이터 전송]

데이터 전달 방식 2가지
1. 쿼리 파라미터 _GET _검색어
2. HTTP 메시지 바디 _POST, PUT, PATCH _회원가입, 주문, 등록, 변경


4가지 상황
1. 정적 데이터 조회하는 상황 ex)이미지, 텍스트 문서
: 쿼리 파라미터 미사용 _GET

2. 동적 데이터 조회하는 상황ex)검색
: 쿼리 파라미터로 전달 (검색대상, 검색조건등) _GET

3. HTML Form을 통해 데이터 전송하는 상황 ex)회원가입, 주문)
:  HTTP메세지 바디로 전달 _POST, GET
ex) <form> 
	<input name="username">
	<input name="age">
</form>
// 서버에 username입력값, age입력값 전송(key=value, 쿼리 파라미터 형식으로)
// HTTP 메시지 구조의 바디에 담김

4. HTTP API를 통해 데이터 전송하는 상황
: HTML Form을 쓰지 않은 모든 상황

* HTTP API가 HTTP메서드를 이용한거 아니엇나? 위에 방법들에 HTTP메서드들은 뭐임



=> 정리 김영한白
: 데이터 전달 방식 2가지
클라에서 서버로 데이터전송상황 4가지





[HTTP API 설계 예시] _URI구성과 데이터전달 매커니즘을 어떻게 설계할까

- 회원 관리 시스템을 만들어 보자 _POST 기반 등록(컬렉션)

* 섹션 4에서의 잘못된 예
회원 목록 조회 : /read-member-list
회원 조회 : /read-member-by-id
회원 등록 : /create-member
회원 수정 : /update-member
회원 삭제 : /delete-member

* 고친 예(resource와 행위를 url(리소스식별자)과 http메서드로 분리)
회원 목록 조회 : /members -> GET
회원 조회 : /members/{id} -> GET
회원 등록 : /members -> POST
회원 수정 : /members/{id} -> PATCH, PUT, POST
회원 삭제 : /members/{id} -> DELETE
* /members/{id} : members의 id에 대해 조회, 수정, 삭제 _계층구조
* 수정은 PATCH를 권장
* POST의 경우는 URI에서 /member에다 넣어달라고 한 반면,
PUT은 /member/100에다 넣어달라 하는 것이 차이점 _섹션4 인용
* 자세사항은 HTTP메서드 설명 섹션4 참고



- 파일 관리 시스템 _PUT 기반 등록(스토어)
파일 목록 조회 : /files -> GET
파일 조회 : /files/{filename} -> GET
파일 등록 : /files/{filename} -> PUT
파일 삭제 : /files/{filename} -> DELETE
파일 대량 등록 : /files -> POST
* 파일 등록은 기존 파일은 덮어쓰면서 업로드하므로 PUT사용,
단, PUT이므로 해당 리소스의 URI를 알고 있어야 함 _위에 설명함(PUT메소드특징)
* POST는 다목적으로 쓸 수 있으므로, 기능에 맞게 코딩



=> POST기반인 회원 관리 시스템에서 회원 등록과 달리,
PUT기반의 파일 관리 시스템에서 파일 등록은 "클라이언트가 리소스의 URI를 알고 관리함"
=> 
전자 : 컬렉션(Collection) _서버가 관리하는 리소스 디렉토리 _위의 /members가 컬렉션
후자 : 스토어(Store) _클라이언트가 관리하는 리소스 저장소 _ 위의 /files가 스토어

=> 대부분 컬렉션을 씀



- HTML FORM 사용(컨트롤러, 컨트롤URI)

* HTML FORM은 GET, POST만 지원함
따라서 생성, 수정, 삭제같은 기능은
POST로 구현, 동사가 URI에 들어가는 컨트롤URI사용(/new, /edit, /delete)

* 실무에서는 HTTP메소드로만 해결하기 어려움, 그런 경우 컨트롤URI로 혼합해서 사용





[종합]
- 문서
- 컬렉션
- 스토어
- 컨트롤러(controller), 컨트롤 URI

=> 리소스가 뭔지 정하고 URI를 만드는데(컬렉션으로 최대한 해결을 하고),
 그걸로 상황해결이 안되는 상황에는 추가로 컨트롤러 URI사용

* 참고하면 좋은 URI 설계 개념
https://restfulapi.net/resource-naming
















