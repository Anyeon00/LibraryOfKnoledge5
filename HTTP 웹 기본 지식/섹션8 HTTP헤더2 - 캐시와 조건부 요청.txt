섹션8 HTTP헤더2 - 캐시와 조건부 요청

[캐시와 기본 동작]

* 캐시가 없으면
- 똑같은 데이터를 계속 네트워크를 통해 다시 다운로드 받아야 된다
- 인터넷 네트워크는 매우 느리고 비싸다
- 로딩 속도가 느려진다

-> 캐시 적용
: 서버가 HTTP헤더에 cache관련정보를 같이보냄,
웹브라우저가 "브라우저 캐시"에 저장,
두번째 사용할때 요청하기 전에 브라우저 캐시를 뒤져보고 있으면 사용
ex) 응답 HTTP 메시지 헤더에
cache-control: max-age=60
// 웹브라우저의 브라우저 캐시에 저장, 60초동안 사용가능

 - 캐시 가능 시간동안 네트워크를 사용하지 않아도 됨
- 로딩속도가 빠름


* 캐시 시간이 초과됐을때, 데이터가 바꼈다면 다시 받아야겠지만,
안바꼈다면 다시 그 작업을 해야 할까? : 다음 내용


[검증 헤더와 조건부 요청1]

캐시 시간 초과
캐시 유효 시간이 초과해서 서버에 다시 요청할 시
1. 서버에서 기존 데이터를 변경함
2. 서버에서 기존 데이터를 변경하지 않음

1의 경우
당연히 다시 받아야 함

2의 경우
데이터가 안바꼈다는 사실을 확인
-> 데이터의 최종 수정일을 이용
=> 처음 캐시를 받을때 최종수정일을 함께 받아 저장,
캐시시간초과후 다시 요청할때 최종수정일을 함께 보냄,
서버의 해당 데이터 최종수정일이 같으면 HTTP Body(데이터)없이 304 Not Modified(캐시로 리다이렉션)로 응답함,
그러면 웹브라우저는 브라우저 캐시에서 다시 꺼내서 사용
* 검증 헤더 : 처음 서버가 데이터와 함께 보내주는 최종수정일 부분
* 조건부 요청 : 웹브라우저가 검증 헤더로부터 받은 데이터의 최종수정일 부분을 다시 데이터를 요청할때 함께 보내는 것(최종수정일이 바꼇으면 다시 주고, 안 바꼇으면 304를 기대)


[검증 헤더와 조건부 요청2]

검증 헤더 
- 캐시 데이터와 서버 데이터가 같은지 검증하는 데이터
- Last-Modified, ETag	// 헤더에 쓰이는 modifier

조건부 요청 헤더
- 검증 헤더로 조건에 따른 분기
- If-Modified-Since : Last-Modified 사용
- If-None-Match : ETag 사용
- 조건이 만족하면 200 OK
- 조건이 만족하지 않으면 304 Not Modified _너의 캐시로 리다이렉션 해라
* 웹브라우저가 if Modified 변경됐나요? 라고 물어본건데, 참이면 200 OK이고 거짓이면 304 리다이렉션


* ETag
- 날짜대신 버전을 사용
- 클라이언트 입장에서 ETag가 같으면 캐시사용, 다르면 다시 받기


[캐시와 조건부 요청 헤더]
위 내용 정리

Cache-Control : 캐시 제어(캐시 지시어)
- max-age : 캐시 유효 시간, 초 단위
- no-cache : (조건부 요청 헤더로)데이터가 바꼈는지 항상 서버에 검증하고 캐시 사용
- no-store : 데이터에 민감한 정보가 있어, 하드에 저장하지말고 메모리에서 사용(최대한 빨리 삭제)

* Pragma : 캐시 제어(하위 버전 호환)
* Expires: 캐시 유효 기간(하위 버전 호환)

검증 헤더 (클라이언트 <- 서버)
- ETag
- Last-Modified

조건부 요청 헤더 (클라이언트 -> 서버)
- If-Match, If-None-Match : ETag값 사용
- If-Modified-Since, If-Unmodified-Since : Last-Modified값 사용


[프록시 캐시]

*원 서버 (origin서버) : 진짜 서버

클라이언트와 원 서버간의 데이터 이동 시간이 긺
-> 중간에 "프록시 캐시 서버"를 둠, 데이터를 여기 넣어놓고 클라이언트는 이 서버를 이용

* private 캐시 : 개인 웹 브라우저의 캐시
* public 캐시 : 프록시 캐시 서버의 캐시

Cache-Control
- public : 응답이 public 캐시에 저장되어도 됨
- private : 응답이 private 캐시에 저장해야 함(public 안됨)


[캐시 무효화]

Cache를 안써도 임의로 웹브라우저가 캐시를 할 수 있음
-> 확실하게 못 쓰게 하는 법

Cache-Contorl
- no-cache : (조건부 요청 헤더로)데이터가 바꼈는지 항상 서버에 검증하고 캐시 사용
- no-store : 데이터에 민감한 정보가 있어, 하드에 저장하지말고 메모리에서 사용(최대한 빨리 삭제)
- must-revalidate : 강의 참고

* 위 세개에 HTTP하위호환버전용인 Pragma: no-cache 까지 적용해서 사용
ex) Cache-Control: no-cache, no-store, must-revalidate
Pragma: no-cache




















