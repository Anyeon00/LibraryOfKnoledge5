섹션3 HTTP 기본

[모든 것이 HTTP]
HTTP (HyperText Transfer Protocol)

- Html, Text, 이미지, 음성, 영상, 파일, Json, XML 등
대부분의 데이터를 주고 받을때 대부분 HTTP를 사용

- 실제로 TCP로 전송하는일 없고, HTTP 프로토콜로 전송함

- HTTP역사(버전)
....
HTTP/1.1 : 가장 많이 사용, 중요

- 기반 프로토콜 : TCP 프로토콜
// HTTP/3 버전은 UDP 사용(성능개선)

- 특징
클라이언트&서버 구조
무상태 프로토콜(Stateless), 비연결성
HTTP메시지로 주고 받음
단순함, 확장 가능



[클라이언트 서버 구조]
: 1. 요청 - 클라이언트가 서버에 요청, 응답대기
2. 응답 - 서버가 요청에 결과를 만들어서 응답
* 서버 = 서비스 로직, 클라이언트 = 사용자 인터페이스 역할로 구분

[Stateful, Stateless]
Stateful(상태유지) : 서버가 클라이언트의 정보(상태)를 가지고 있어야함
Stateless(무상태) : 서버가 클라이언트의 상태를 보존X _클라이언트가 모든 정보를 직접 보내주므로

* 필기불가능 _강의 다시 보기

* 한계
- Stateless가 불가능한 경우(로그인 _사용자 정보를 가지고 있어야함)
(stateful은 위 같은 경우 등등에 최소한으로 사용)
- Client가 보내야할 정보가 너무 많음

=> 결론
Stateless는 서버가 클라이언트의 정보를 가지고 있을 필요 없으므로,
1. 중간에 서버가 바뀌어도됨
2. 따라서 서버가 장애가 나도 바꾸면 됨
3. 서버 증설 유리(이유는 잘 이해안됨)
따라서 최대한 무상태로 설계한다

[비 연결성(connectionless)]

연결을 유지하는 경우
: tcp/ip같은경우 연결을 유지 -> 서버자원 소모

연결을 유지하지 않는 경우
: HTTP같은 경우 서버가 응답후 바로 연결을 끊어버림 -> 최소한의 자원 사용
* HTTP가 tcp/ip라며? 
-> tcp/ip인데 계속 유지하고있는게 아니라 잠깐 연결했다 끊고 반복하는식으로 구현

비연결성의 특징
- 초단위 이하 빠른 속도 응답
- 일정 시간동안 클라이언트 요청이 엄청 많아도, 
각각 계속 연결을 유지하는게 아니라 바로 응답하고 끊고 반복함 > 끊긴 사이에 다른 클라가 이용가능 
- 서버 자원 사용이 매우 효율적임

비연결성의 한계와 극복
- Tcp/ip연결을 계속 새로 맺어야함 _3 way handshake시간 추가
- HTTP 지속연결(Persistent Connections)로 해결 _특정경우에는 연결유지 하는 방법

* 순간적 대용량 트래픽 발생 해결방법 _수강신청등
: 최대한 stateless하게 구현



[HTTP 메시지]

모든 형식의 데이터가 HTTP다

- HTTP메시지 구조
start-line 시작 라인
header 헤더
empty line 공백 라인(CRLF)
message body


* HTTP 요청 메시지 ex)
GET /search?q=hello&hl=ko HTTP/1.1	//시작라인
Host: www.google.com		//헤더

* HTTP 응답 메시지 ex)
HTTP/1.1 200 OK		// 시작라인
Content-Type: text/html;charset=UTF-8  //헤더
Content-Length: 2423
<html>			// message body
 <body>...</body>
</html>

-> HTTP요청 메시지와 HTTP응답 메시지 구조가 다름



















