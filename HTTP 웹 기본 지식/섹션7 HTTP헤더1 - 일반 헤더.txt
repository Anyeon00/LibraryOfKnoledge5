섹션7 HTTP헤더1 - 일반 헤더

[HTTP 헤더 개요]
HTTP 헤더
용도 : HTTP 전송에 필요한 모든 부가 정보


* 표현 Representation : 표현 메타데이터 + 표현 데이터

* 페이로드 = 메시지바디


[표현]

* 회원이라는 resource를 html이라는 표현으로 전달할건지, 
json이라는 표현으로 전달할건지, xml이라는 표현으로 전달할건지

Content-Type : 표현 데이터의 형식 _html, json, xml, ... OR png, gif, ...
Content-Encoding : 표현 데이터의 압축 방식 _gzip, deflate, identity, ...
// 표현데이터를 압축하기 위해 사용, 이정보로 압축 해제
Content-Language : 표현 데이터의 자연 언어 _ko, en, ...
Content-Length : 표현 데이터의 길이
// 바이트 단위

* 표현 헤더는 전송, 응답 둘다 사용


[콘텐츠 협상]
클라이언트가 선호하는 표현 요청 _서버가 가능한 지원해줌

Accept
Accept-Charset
Accept-Endcoding
Accept-Language
각각 클라이언트가 원하는 Type, 문자 Encoding, 압축 Encoding, 자연언어
* 물론 요청시에만 사용

* 협상과 우선순위
1. Quality Values(q)값 사용
0~1 사용
클수록 높은 우선순위
생략시 1
ex) Accept-Language : ko-KR, en-US;q=0.9
// ko-KR은 1, en-US는 0.9

2. 구체적인 것이 우선
text/* 보다 text/plain
text/plain 보다 text/plain;format=flowed가 우선


[전송 방식]

단순 전송 : 그냥 그대로 전송
* Content-Length를 알수 있을때
압축 전송 : 압축해서 전송
* Content-Encoding 필요
분할 전송 : 쪼개서 전송
* Content-Length사용 불가 _길이예측불가
범위 전송 : 범위만큼 전송
* 전송 중 끊겼을때, 뒤에 범위만 전송하던가


[일반 정보]

From : 클라이언트의 이메일 정보
* 잘 사용안됨
Referer : 현재 요청된 페이지의 이전 웹 페이지 주소 //ㅈㅉ 많이씀
* 유입 경로 분석 가능, 요청에서 사용
User-Agent : 클라이언트 애플리케이션(또는 웹브라우저) 정보
* 통계정보, 어떤 종류의 브라우저에서 장애가 발생하는지 파악 가능, 요청에서 사용
Server : 요청을 처리하는 ORIGIN 서버의 소프트웨어 정보
Date : 메시지가 발생한 날짜와 시간
* 응답에서 사용


[특별한 정보]

Host : 요청한 호스트 정보(도메인_IP주소)
* 필수, 요청에서 사용
Location : 상태코드 3xx 응답에 Location 헤더가 있으면, Location위치로 자동이동
* 섹션6 [3xx - 리다이렉션 참고]
Allow : 허용 가능한 HTTP 메서드
* 응답에 Allow정보를 확인한 클라이언트가 허용된 메서드만으로 요청함, 잘안씀
Retry-After : 상태코드 503 오류시, 언제까지 서비스 불능인지 알려줌
* 섹션6 참고


[인증]

Authorization : 클라이언트 인증 정보를 서버에 전달
WWW-Authenticate : 리소스 접근시 필요한 인증 방법 정의
* 401 Unauthorized 응답과 함께 사용


[쿠키]	// 로그인인증증명서(?)

Set-Cookie : 서버에서 클라이언트로 쿠키 전달(응답)
Cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청시 서버로 전달

HTTP는 무상태(Stateless) 프로토콜임 (계속 연결되어있지 않음_섹션3 [Stateless] 참고)
따라서 클라이언트가 로그인 인증을 했다는 걸 서버에 보여주기위해,
요청에 사용자 정보(Cookie)를 포함하는 방법 사용


설명 : 
클라이언트가 naver 페이지를 요청함(접속함)
클라이언트가 로그인후 같은 페이지를 다시 요청함(접속함)
서버가 같은 페이지를 요청받았다고 같은 페이지를 주면 안되잖음
-> 클라이언트가 로그인시 서버가 Set-Cookie를 줌,
클라이언트가 다시 접속할 때 서버에 Cookie를 같이 보냄,
서버가 받은 Cookie를 보고 회원으로써 페이지를 보내주게 됨

즉, 클라가 서버에 로그인 인증하면 서버로부터 Cookie를 받고, 
재접속시 Cookie를 같이보내면 로그인 된 페이지가 옴

설명정리 :
웹브라우저가 서버에 로그인 인증을 하면,
서버가 웹브라우저에 인증증명서인 쿠키를 보냄,
웹브라우저가 받아서 쿠키 저장소에 저장
그 이후 해당 서버에 요청마다 쿠키저장소를 무조건 뒤져서 헤더에다 자동포함


* 쿠키 생명주기 Expires, max-age
- Expires
ex) Set-Cookie: expires=Sat, 26-Dec-2020 04:39:21 GMT
해당 쿠키(인증증명서)의 만료일
- max-age
ex) Set-Cookie: max-age=3600
해당 쿠키의 사용가능 시간(3600초)
- 영속 쿠키 : 만료 날짜가 존재하는 경우
- 세션 쿠키 : 만료 날짜를 생략하면 브라우저 종료시 까지만


* 쿠키 도메인
받은 쿠키를 아무 서버에나 다 보내면 안되니까
쿠키에 도메인(_ip주소)을 포함함
-> 생략시 받은 서버 도메인이 default값


* 쿠키 - 경로

* 쿠키 - 보안
- Secure : 쿠키는 http, https구분 없이 전송, Secure적용시 https만 전송
- HttpOnly : XSS공격 방지(자바스크립트접근불가), HTTP전송에만 사용
- SameSite : XSRF공격 방지, 요청도메인=쿠키설정된도메인인 경우만 쿠키 전송















